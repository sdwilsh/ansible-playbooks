---
- name: Mount the filesystem as rw
  hosts: pikvm
  gather_facts: no
  tasks:
    - name: Mount the filesystem as rw
      ansible.builtin.raw: rw
      changed_when: no
- name: Setup ansible_distribution-based Groups
  hosts: all:!kairos:!vyos:!mariadb
  gather_facts: yes
  gather_subset:
    - "!all"
    - "!min"
    - distribution
  tasks:
    - name: Add hosts to ansible_distribution group
      ansible.builtin.add_host:
        name: "{{ item }}"
        group: "{{ hostvars[item]['ansible_facts']['distribution'] }}"
      changed_when: no
      delegate_to: localhost
      loop: "{{ ansible_play_batch }}"
  post_tasks:
    - name: Mount the filesystem as ro
      ansible.builtin.raw: ro
      changed_when: no
      when: "'pikvm' in group_names"

#
# ansible_disbribution-Specific Update Logic
#

- hosts: Archlinux # ansible_disbrution == Archlinux
  gather_facts: no
  order: sorted
  pre_tasks:
    - name: Mount the filesystem as rw
      ansible.builtin.raw: rw
      changed_when: no
      when: "'pikvm' in group_names"
  tasks:
    - name: Update packages with pacman
      community.general.pacman:
        update_cache: yes
        upgrade: yes
      register: pacman
    # This only works because there's only a single host active today.
    - name: Add hosts to group that will be rebooted
      ansible.builtin.add_host:
        name: "{{ inventory_hostname }}"
        group: ToReboot
      changed_when: no
      delegate_to: localhost
      when: pacman.changed
  post_tasks:
    - name: Mount the filesystem as ro
      ansible.builtin.raw: ro
      changed_when: no
      when: "'pikvm' in group_names"

- name: Perform Updates for Ubuntu hosts
  hosts: Ubuntu # ansible_disbrution == Ubuntu
  gather_facts: no
  order: "sorted"
  tasks:
    - name: "Update packages with apt"
      ansible.builtin.apt:
        autoclean: yes
        autoremove: yes
        name: "*"
        state: "latest"
        update_cache: yes
      async: 1800 # 30 minutes, mostly becuase a Pi 2 is slow.
      become: yes
      poll: 5
- name: Determine if any Ubuntu hosts need to be rebooted after updating
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Determine if a reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required
      delegate_to: "{{ hostname }}"
      loop: "{{ groups.Ubuntu }}"
      loop_control:
        loop_var: hostname
    - name: Add hosts to group that will be rebooted
      ansible.builtin.add_host:
        name: "{{ item.hostname }}"
        group: ToReboot
      changed_when: no
      loop: "{{ reboot_required.results }}"
      loop_control:
        label: "{{ item.hostname }}"
      when: item.stat.exists

- name: Reboot hosts that need to be rebooted
  hosts: ToReboot
  gather_facts: no
  order: sorted
  pre_tasks:
    - name: Mount the filesystem as rw
      ansible.builtin.raw: rw
      changed_when: no
      when: "'pikvm' in group_names"
  serial: 1
  tasks:
    - name: Reboot the host
      ansible.builtin.reboot:
        msg: Reboot to apply updates initiated by Ansible
        pre_reboot_delay: 60
        test_command: "{{ reboot_test_command }}"
      become: yes
