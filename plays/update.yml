---
- name: Setup ansible_distribution-based Groups
  hosts: all:!kairos:!vyos:!pikvm
  gather_facts: yes
  gather_subset:
    - "!all"
    - "!min"
    - distribution
  tasks:
    - name: Add hosts to ansible_distribution group
      ansible.builtin.add_host:
        name: "{{ item }}"
        group: "{{ hostvars[item]['ansible_facts']['distribution'] }}"
      changed_when: no
      delegate_to: localhost
      loop: "{{ ansible_play_batch }}"

- name: Perform Updates for PiKVM Hosts
  hosts: pikvm
  gather_facts: no
  order: sorted
  pre_tasks:
    - name: Mount the filesystem as rw
      ansible.builtin.raw: rw
      changed_when: no
      when: "'pikvm' in group_names"
  tasks:
    - name: Update with pikvm-update
      ansible.builtin.shell:
        cmd: pikvm-update --no-reboot
      become: yes
    - name: Schedule Reboot
      ansible.builtin.add_host:
        name: "{{ item }}"
        group: ToReboot
      changed_when: no
      delegate_to: localhost
      loop: "{{ ansible_play_batch }}"

#
# ansible_disbribution-Specific Update Logic
#

- name: Perform Updates for Ubuntu hosts
  hosts: Ubuntu # ansible_disbrution == Ubuntu
  gather_facts: no
  order: "sorted"
  tasks:
    - name: "Update packages with apt"
      ansible.builtin.apt:
        autoclean: yes
        autoremove: yes
        name: "*"
        state: "latest"
        update_cache: yes
      async: 3600 # 60 minutes, mostly becuase a Pi 2 is slow.
      become: yes
      poll: 5
    - name: Determine if a reboot is required
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_stat
    - name: Note if the host needs to be rebooted
      ansible.builtin.set_fact:
        reboot_required: "{{ reboot_required_stat.stat.exists }}"
    - name: Schedule Reboot
      ansible.builtin.add_host:
        name: "{{ item }}"
        group: ToReboot
      changed_when: no
      delegate_to: localhost
      loop: "{{ ansible_play_batch }}"
      when: hostvars[item].reboot_required

- name: Reboot hosts that need to be rebooted
  hosts: ToReboot
  gather_facts: no
  order: sorted
  pre_tasks:
    - name: Mount the filesystem as rw
      ansible.builtin.raw: rw
      changed_when: no
      when: "'pikvm' in group_names"
  serial: 1
  tasks:
    - name: Reboot the host
      ansible.builtin.reboot:
        msg: Reboot to apply updates initiated by Ansible
        pre_reboot_delay: 60
        test_command: "{{ reboot_test_command }}"
      become: yes
