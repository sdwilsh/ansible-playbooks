---
- hosts: kairos
  gather_facts: false
  order: sorted
  tasks:
    - name: Ensure configuration is up-to-date
      ansible.builtin.template:
        dest: /oem/90_custom.yaml
        src: templates/config.yml.j2
        validate: kairos validate %s
      become: true
      register: config
      vars:
        controlplane_hosts: "{{ groups['kairos_controlplane'] }}"
        host: "{{ inventory_hostname }}"
    # If the config changes, including files that should no longer exist, we want to make sure the new config is what applies.
    - name: Remove old network files
      block:
        - name: Collect all network configuration files
          ansible.builtin.find:
            paths: /etc/systemd/network/
          register: collected_network_files
        - name: Remove all collected network files
          ansible.builtin.file:
            path: "{{ item.path }}"
            state: absent
          become: true
          loop: "{{ collected_network_files.files }}"
          loop_control:
            label: "{{ item.path }}"
      when: config.changed
    - name: Ensure k3s service file is up-to-date
      ansible.builtin.template:
        dest: /etc/systemd/system/k3s.service.d/override.conf
        src: templates/k3s.service.j2
      become: true
      register: k3s_service
      when: k3s_controlplane
    - name: Ensure k3s-agent service file is up-to-date
      ansible.builtin.template:
        dest: /etc/systemd/system/k3s-agent.service.d/override.conf
        src: templates/k3s-agent.service.j2
      become: true
      register: k3s_agent_service
      when: not k3s_controlplane
    - name: Read in current version
      ansible.builtin.slurp:
        src: /etc/kairos-release
      register: osreleasefile
    - name: Decode release metadata
      ansible.builtin.set_fact:
        contents: "{{ osreleasefile['content'] | b64decode }}"
    - name: Extract metadata
      ansible.builtin.set_fact:
        os_image_version: '{{ contents | regex_findall(''^KAIROS_VERSION="(.*)"$'', multiline=True) | last }}'
    - name: Print os image
      ansible.builtin.debug:
        var: os_image_version
    - name: Print target image
      ansible.builtin.debug:
        var: target_image_version
    - name: Install Recovery Update
      ansible.builtin.command:
        argv:
          - kairos-agent
          - upgrade
          - --recovery
          - --source
          - "oci:ghcr.io/marinatedconcrete/kairos-ubuntu:{{ recovery_image_version }}"
      become: true
      when: os_image_version != target_image_version
    - name: Install update
      ansible.builtin.command:
        argv:
          - kairos-agent
          - upgrade
          - --source
          - "oci:ghcr.io/marinatedconcrete/kairos-ubuntu:{{ target_image_version }}"
      become: true
      when: os_image_version != target_image_version
    - name: Note if the host needs to be rebooted
      ansible.builtin.set_fact:
        reboot_required: "{{ os_image_version != target_image_version or config.changed or k3s_service.changed or k3s_agent_service.changed }}"
    - name: Schedule Drain and Reboot
      ansible.builtin.add_host:
        name: "{{ item }}"
        group: ToReboot
      changed_when: false
      delegate_to: localhost
      loop: "{{ ansible_play_batch }}"
      when: hostvars[item].reboot_required
  vars:
    recovery_image_version: 0.1.6
    # renovate: datasource=docker depName=ghcr.io/marinatedconcrete/kairos-ubuntu
    target_image_version: 0.2.2

- name: Serially drain and reboot hosts that need to be rebooted
  hosts: ToReboot
  gather_facts: false
  order: sorted
  serial:
    - 1 # This will always be the first control plane node.
    - 1 # This will be the second node.
    - 1 # This will be the third node.
    - 2 # The remaining nodes in chunks of two.
  strategy: free
  tasks:
    - name: Drain
      ansible.builtin.shell:
        cmd: "kubectl drain {{ inventory_hostname_short }} --ignore-daemonsets --delete-emptydir-data --force --pod-selector='{{ pod_selectors | join(',') }}' --kubeconfig ~/.kube/config"
      delegate_to: localhost
      vars:
        pod_selectors: []
    - name: Reboot
      ansible.builtin.reboot:
        pre_reboot_delay: 60 # seconds
        connect_timeout: 240 # seconds
        test_command: "{{ reboot_test_command }}"
      become: true
    - name: Uncordon
      kubernetes.core.k8s_drain:
        name: "{{ inventory_hostname_short }}"
        state: uncordon
      delegate_to: localhost
      retries: 3
      delay: 10
