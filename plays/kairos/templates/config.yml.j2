#cloud-config

hostname: {{ hostvars[host].inventory_hostname }}

users:
  - name: kairos
    ssh_authorized_keys:
{% for item in common__keys %}
      - {{ item.type }} {{ item.key }}
{% endfor %}

{% if hostvars[host].k3s_controlplane %}
# Note that Kairos does not update this after first-install.  The service unit is managed by ansible.
# See k3s.service.j2
k3s:
  args:
    - --flannel-iface=services
    - --node-ip={{ hostvars[host].common__ip_addresses | ansible.utils.ipaddr('10.11.0.0/23') | ansible.utils.ipaddr('address') | first }}
    - --node-name={{ hostvars[host].inventory_hostname_short }}
{% if hostvars[host].k3s_cluster_init | default(False) %}
    - --cluster-init
{% else %}
    - --server https://{{ hostvars[groups[hostvars[host].k3s_controlplane_group] | first].inventory_hostname }}:6443
{% endif %}
    - --cluster-cidr=172.16.0.0/16
    - --service-cidr=172.17.0.0/16
    - --disable=traefik,servicelb
    - --disable-helm-controller
{% for tls_san in hostvars[host].k3s_controlplane_san %}
    - --tls-san={{ tls_san }}
{% endfor %}
{% else %}
# Note that Kairos does not update this after first-install.  The service unit is managed by ansible.
# See k3s-agent.service.j2
k3s-agent:
  args:
    - --flannel-iface=services
    - --node-ip={{ hostvars[host].common__ip_addresses | ansible.utils.ipaddr('10.11.0.0/23') | ansible.utils.ipaddr('address') | first }}
    - --node-name={{ hostvars[host].inventory_hostname_short }}
{% endif %}
  enabled: true
  env:
    K3S_TOKEN: "{{ hostvars[host].k3s_token }}"
{% if not hostvars[host].k3s_controlplane %}
    K3S_URL: https://{{ hostvars[groups[hostvars[host].k3s_controlplane_group] | first].inventory_hostname }}:6443
{% endif %}

stages:
{% if "kairos__disks_to_format" in hostvars[host] and hostvars[host].kairos__disks_to_format | length > 0 %}
  boot:
{% for disk in hostvars[host].kairos__disks_to_format %}
{% if 'nvme' in disk %}
{% set partition_path = "%sp1" % disk %}
{% else %}
{% set partition_path = "%s1" % disk %}
{% endif %}
    - name: Prep disk {{ disk }}
      directories:
        - path: /usr/local/disk{{ loop.index0 }}
          permissions: 0600
          owner: 0
          group: 0
      layout:
        device:
          path: {{ disk }}
        expand_partitions:
          size: 0 # Full Disk
        add_partitions:
          - pLabel: primary
            filesystem: ext4
    - name: Mount disk {{ disk }}
      commands:
        - rm -rf /usr/local/disk{{ loop.index0 }}/*
        - mount -o rw {{ partition_path }} /usr/local/disk{{ loop.index0 }}
{% endfor %}
{% endif %}
  initramfs:
    - name: Set inotify max values
      sysctl:
        fs.inotify.max_user_instances: "8192"
        fs.inotify.max_user_watches: "524288"
    - name: Setup NTP
      systemctl:
        enable:
          - systemd-timesyncd
      timesyncd:
        NTP: {{ common__ntp_pool }}
        FallbackNTP: ""
    - files:
{% if "common__interfaces" in hostvars[host] and "bonds" in hostvars[host].common__interfaces %}
        # This host has multiple NICs with a bond for failover.
{% for bond in hostvars[host].common__interfaces.bonds %}
        # Setup {{ bond.name }}.
        - path: /etc/systemd/network/01-{{ bond.name }}.netdev
          permissions: 0644
          content: |
            [NetDev]
            Name={{ bond.name }}
            Kind=bond
            [Bond]
            Mode={{ bond.mode }}
            PrimaryReselectPolicy=always
            MIIMonitorSec=1s
        - path: /etc/systemd/network/01-{{ bond.name }}.network
          permissions: 0644
          content: |
            [Match]
            Name={{ bond.name }}
            [Network]
            Bridge={{ bond.bridge_name }}
        # Setup the bridge for the bond.
        - path: /etc/systemd/network/02-{{ bond.bridge_name }}.netdev
          permissions: 0644
          content: |
            [NetDev]
            Name={{ bond.bridge_name }}
            Kind=bridge
        # Setup Supported VLANs for {{ bond.bridge_name }}.
        - path: /etc/systemd/network/01-{{ bond.bridge_name }}.network
          permissions: 0644
          content: |
            [Match]
            Name={{ bond.bridge_name }}
            [Network]
            LinkLocalAddressing=no
{% for network in hostvars[host].kairos_managed_networks %}
            VLAN={{ network.name }}
{% endfor %}
        # Slaves for {{ bond.name }}.
{% for slave in bond.slaves %}
        - path: /etc/systemd/network/05-slave-{{ slave.mac | replace(':', '-') }}-{{ bond.name }}.network
          permissions: 0644
          content: |
            [Match]
            PermanentMACAddress={{ slave.mac }}
            [Network]
            Bond={{ bond.name }}
{% if slave.primary | default(false) %}
            PrimarySlave=true
{% endif %}
{% endfor %}
{% endfor %}
{% else %}
        # This host only has a single NIC.
        - path: /etc/systemd/network/02-uplink.netdev
          permissions: 0644
          content: |
            [NetDev]
            Name=uplink
            Kind=bridge
            MACAddress={{ (hostvars[host].common__interfaces.interfaces | first).mac }}
        # Link the single NIC to the uplink bridge.
        - path: /etc/systemd/network/01-{{ (hostvars[host].common__interfaces.interfaces | first).name }}.network
          permissions: 0644
          content: |
            [Match]
            Name={{ (hostvars[host].common__interfaces.interfaces | first).name }}
            [Network]
            Bridge=uplink
        # Setup Supported VLANs for the interface and link the bridge to it.
        - path: /etc/systemd/network/01-uplink.network
          permissions: 0644
          content: |
            [Match]
            Name=uplink
            [Network]
            LinkLocalAddressing=no
{% for network in hostvars[host].kairos_managed_networks %}
            VLAN={{ network.name }}
{% endfor %}
{% endif %}
        # VLAN setup for any managed networks.
{% for network in hostvars[host].kairos_managed_networks %}
        - path: /etc/systemd/network/10-{{ network.name }}.netdev
          permissions: 0644
          content: |
            [NetDev]
            Name={{ network.name }}
            Kind=vlan
            [VLAN]
            Id={{ network.vlan_id }}
        - path: /etc/systemd/network/10-{{ network.name }}.network
          permissions: 0644
          content: |
            [Match]
            Name={{ network.name }}
            [Network]
{% if 'address' in network and network['address'] %}
            Address={{ network.address }}
{% endif %}
{% if 'gateway' in network %}
            DNS={{ network.gateway }}
            Gateway={{ network.gateway }}
{% endif %}
{% endfor %}
  fs:
    - name: Ensure kairos owns files in its user directory
      commands:
        - chown -R kairos:kairos ~kairos
