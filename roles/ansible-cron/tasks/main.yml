---
# tasks file for ansible-cron
- name: Sanity Check
  ansible.builtin.assert:
    that: "ansible_cron__inventory_file == 'prod-inventory' or ansible_cron__inventory_file == 'testing-inventory'"
    fail_msg: "Please set ansible_cron__inventory_file to the correct inventory file in host_vars/{{ inventory_hostname }}.yml"

- name: Install dependencies
  ansible.builtin.apt:
    name:
      - cron
      - libonig-dev
      - python3-pip
      - python3-venv
      - software-properties-common
    state: present
  when: ansible_distribution == "Ubuntu"

- name: Add ansible user to srcs group
  ansible.builtin.user:
    append: true
    name: "ansible"
    groups:
      - "srcs"
- name: Checkout playbooks
  ansible.builtin.git:
    repo: "https://github.com/sdwilsh/ansible-playbooks.git"
    dest: "/src/ansible-playbooks"
    update: false
- name: "Ensure /src/ansible-playbooks is owned by ansible"
  ansible.builtin.file:
    state: "directory"
    recurse: true
    path: "/src/ansible-playbooks"
    owner: "ansible"
    group: "ansible"
- name: Create vault password file
  ansible.builtin.copy:
    dest: "/src/ansible-playbooks/.ansible_vault_password"
    content: "{{ ansible_cron__vault_password }}"
    mode: "u=rw,g=,o="
    owner: "ansible"
    group: "ansible"

- name: "Ensure logfile exists"
  ansible.builtin.file:
    group: "ansible"
    mode: "0644"
    modification_time: "preserve"
    owner: "ansible"
    path: "/var/log/ansible.log"
    state: "touch"
  changed_when: false
- name: "Install logrotate conf for ansible logs"
  when: ansible_os_family == "Debian"
  ansible.builtin.template:
    dest: "/etc/logrotate.d/ansible"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r"
    src: "logrotate-ansible.j2"
- name: "Create ansible-cron script"
  ansible.builtin.copy:
    content: |
      #!/usr/bin/env bash
      set -e

      # Adding up to 15 minutes of jitter so not all machines hit resources at the same time.
      _SLEEP_DURATION=$(( RANDOM %= 900 ))
      echo "Sleeping for ${_SLEEP_DURATION} seconds before starting..."
      /usr/bin/logger -p user.notice -t ansible-cron -- "Sleeping for ${_SLEEP_DURATION} seconds before starting..."
      sleep ${_SLEEP_DURATION}

      cd /src/ansible-playbooks

      /usr/bin/logger -p user.notice -t ansible-cron -- "Pulling updates to /src/ansible-playbooks"
      git pull --rebase

      /usr/bin/logger -p user.notice -t ansible-cron -- "Setting up and activating venv"
      rm -rf .venv
      python3 -m venv .venv
      source .venv/bin/activate
      pip install -r requirements.txt

      export ANSIBLE_LOG_PATH=/var/log/ansible.log

      /usr/bin/logger -p user.notice -t ansible-cron -- "Installing collections"
      ansible-galaxy collection install --force -U -p external_collections/ -r requirements.yml

      /usr/bin/logger -p user.notice -t ansible-cron -- "Installing roles"
      ansible-galaxy role install --force-with-deps -p external_roles/ -r requirements.yml

      /usr/bin/logger -p user.notice -t ansible-cron -- "Running ansible"
      ansible-playbook --connection=local -i {{ ansible_cron__inventory_file }} -l {{ inventory_hostname }} site.yml
    dest: "/home/ansible/ansible-cron.sh"
    mode: "u=rx,g=rx,o=r"
    owner: "ansible"
    group: "ansible"
- name: Setup cron job at boot
  ansible.builtin.cron:
    name: run ansible locally @reboot
    job: if ! out=`/home/ansible/ansible-cron.sh`; then echo $out; fi
    user: ansible
    special_time: reboot
    state: present
- name: Setup cron job at desired interval
  ansible.builtin.cron:
    name: "run ansible locally @{{ ansible_cron__interval }}"
    job: if ! out=`/home/ansible/ansible-cron.sh`; then echo $out; fi
    user: ansible
    special_time: "{% if ansible_cron__interval %}{{ ansible_cron__interval }}{% else %}hourly{% endif %}"
    state: present
  when: ansible_cron__interval
