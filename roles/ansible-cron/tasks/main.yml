---
# tasks file for ansible-cron
- ansible.builtin.assert:
    that: "ansible_cron__inventory_file == 'prod-inventory' or ansible_cron__inventory_file == 'testing-inventory'"
    fail_msg: "Please set ansible_cron__inventory_file to the correct inventory file in host_vars/{{ inventory_hostname }}.yml"

- name: Install dependencies
  ansible.builtin.apt:
    name:
      - cron
      - python3-pip
      - software-properties-common
    state: present
  when: ansible_distribution == "Ubuntu"
- name: "Install Ansible PPA Repository"
  ansible.builtin.apt_repository:
    repo: "ppa:ansible/ansible"
    state: "present"
  become: yes
  when: ansible_distribution == "Ubuntu"
- name: "Ensure ansible is installed"
  ansible.builtin.package:
    name: "{% if ansible_distribution == 'FreeBSD' %}sysutils/ansible{% else %}ansible{% endif %}"
    state: "present"
- name: "Ensure python deps are installed"
  ansible.builtin.pip:
    extra_args: "--user"
    name: "{{ item }}"
    state: "latest"
  become: yes
  become_user: "ansible"
  loop:
    - "ara"
    - "jmespath" # For community.general.json_query
    - "netaddr"
    # Can be removed once we have 2.13 or later
    # See https://github.com/ansible/ansible/issues/77624
    - "resolvelib<0.6.0"

- name: Add ansible user to srcs group
  ansible.builtin.user:
    append: yes
    name: "ansible"
    groups:
      - "srcs"
- name: Checkout playbooks
  ansible.builtin.git:
    repo: "https://github.com/sdwilsh/ansible-playbooks.git"
    dest: "/src/ansible-playbooks"
    update: no
- name: "Ensure /src/ansible-playbooks is owned by ansible"
  ansible.builtin.file:
    state: "directory"
    recurse: yes
    path: "/src/ansible-playbooks"
    owner: "ansible"
    group: "ansible"
- name: Create vault password file
  ansible.builtin.copy:
    dest: "/src/ansible-playbooks/.ansible_vault_password"
    content: "{{ ansible_cron__vault_password }}"
    mode: "u=rw,g=,o="
    owner: "ansible"
    group: "ansible"

- name: "Ensure logfile exists"
  ansible.builtin.file:
    group: "ansible"
    mode: "0644"
    modification_time: "preserve"
    owner: "ansible"
    path: "/var/log/ansible.log"
    state: "touch"
  changed_when: no
- name: "Install logrotate conf for ansible logs"
  when: ansible_os_family == "Debian"
  ansible.builtin.template:
    dest: "/etc/logrotate.d/ansible"
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r"
    src: "logrotate-ansible.j2"
- name: "Ensure /usr/local/etc/newsyslog.conf.d/ exists"
  when: ansible_distribution == "FreeBSD"
  ansible.builtin.file:
    group: "wheel"
    mode: "u=rwx,g=rx,o=rx"
    owner: "root"
    path: "/usr/local/etc/newsyslog.conf.d"
    state: "directory"
- name: "Install newsyslog conf for ansible logs"
  when: ansible_distribution == "FreeBSD"
  ansible.builtin.template:
    dest: "/usr/local/etc/newsyslog.conf.d/ansible.conf"
    owner: "root"
    group: "wheel"
    mode: "u=rw,g=r,o=r"
    src: "newsyslog-ansible.conf.j2"
- name: Set environment in cron file for ARA API Client
  ansible.builtin.cron:
    name: "ARA_API_CLIENT"
    env: yes
    job: "http"
    user: "ansible"
    state: present
- name: Set environment in cron file for ARA API Client
  ansible.builtin.cron:
    name: "ARA_API_SERVER"
    env: yes
    job: "https://ara.hogs.tswn.us"
    user: "ansible"
    state: present
- name: "Create ansible-cron script"
  ansible.builtin.copy:
    content: |
      #!/usr/bin/env bash
      set -e

      export ANSIBLE_LOG_PATH=/var/log/ansible.log
      export ANSIBLE_CALLBACK_PLUGINS=$({{ ansible_python.executable }} -m ara.setup.callback_plugins)
      export ARA_API_CLIENT=http
      export ARA_API_SERVER=http://ara.hogs.tswn.us:8000
      export ARA_CALLBACK_THREADS=4

      # Adding up to 15 minutes of jitter so not all machines hit resources at the same time.
      _SLEEP_DURATION=$(( RANDOM %= 900 ))
      echo "Sleeping for ${_SLEEP_DURATION} seconds before starting..."
      /usr/bin/logger -p user.notice -t ansible-cron -- "Sleeping for ${_SLEEP_DURATION} seconds before starting..."
      sleep ${_SLEEP_DURATION}

      cd /src/ansible-playbooks
      /usr/bin/logger -p user.notice -t ansible-cron -- "Pulling updates to /src/ansible-playbooks"
      git pull --rebase
      /usr/bin/logger -p user.notice -t ansible-cron -- "Installing collections"
      ansible-galaxy collection install -U -r requirements.yml
      /usr/bin/logger -p user.notice -t ansible-cron -- "Installing roles"
      ansible-galaxy role install --force-with-deps -r requirements.yml
      /usr/bin/logger -p user.notice -t ansible-cron -- "Running ansible"
      ansible-playbook --connection=local -i {{ ansible_cron__inventory_file }} -l {{ ansible_fqdn }} site.yml
    dest: "/home/ansible/ansible-cron.sh"
    mode: "u=rx,g=rx,o=r"
    owner: "ansible"
    group: "ansible"
- name: Setup cron job at boot
  ansible.builtin.cron:
    name: run ansible locally @reboot
    job: if ! out=`/home/ansible/ansible-cron.sh`; then echo $out; fi
    user: ansible
    special_time: reboot
    state: present
- name: Setup cron job at desired interval
  ansible.builtin.cron:
    name: "run ansible locally @{{ ansible_cron__interval }}"
    job: if ! out=`/home/ansible/ansible-cron.sh`; then echo $out; fi
    user: ansible
    special_time: "{% if ansible_cron__interval %}{{ ansible_cron__interval }}{% else %}hourly{% endif %}"
    state: present
  when: ansible_cron__interval
